{"updateTime":"2024-03-28 02:19:06","data":[{"username":"briansmith","name":"Brian Smith","type":"user","url":"https://github.com/briansmith","avatar":"https://avatars.githubusercontent.com/u/16816?s=96&v=4","repo":{"name":"ring","description":"Safe, fast, small crypto using Rust","url":"https://github.com/briansmith/ring"}},{"username":"fjl","name":"Felix Lange","type":"user","url":"https://github.com/fjl","avatar":"https://avatars.githubusercontent.com/u/6915?s=96&v=4","repo":{"name":"7002asm","description":"Implementation of EIP-7002 System Contract","url":"https://github.com/fjl/7002asm"}},{"username":"lukechampine","name":"Luke Champine","type":"user","url":"https://github.com/lukechampine","avatar":"https://avatars.githubusercontent.com/u/3344749?s=96&v=4","repo":{"name":"blake3","description":"A pure-Go implementation of the BLAKE3 cryptographic hash function","url":"https://github.com/lukechampine/blake3"}},{"username":"danielhuppmann","name":"Daniel Huppmann","type":"user","url":"https://github.com/danielhuppmann","avatar":"https://avatars.githubusercontent.com/u/16931589?s=96&v=4","repo":{"name":"binary_equilibrium","description":"Illustrative examples of a multi-objective program subject to a binary quasi-equilibrium","url":"https://github.com/danielhuppmann/binary_equilibrium"}},{"username":"aead","name":"Andreas Auernhammer","type":"user","url":"https://github.com/aead","avatar":"https://avatars.githubusercontent.com/u/20368805?s=96&v=4","repo":{"name":"chacha20","description":"ChaCha20 and XChaCha20 stream ciphers","url":"https://github.com/aead/chacha20"}}]}